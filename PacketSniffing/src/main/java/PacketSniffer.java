/*
    Authors: Aaron, Aaron, John, Jordan 
    Student IDs: x19404024, x19435964, x19141301, x19765711 
    Created On: 10/11/2021
    Last Modified: 10/11/2021
    Description: 
    ------------------------
    Create an application that monitors packets 
    sent across 2 machines and intercepts the contents. 
    Using cryptography, we can encrypt the packets sent across the network, 
    making them unviewable outside peer-to-peer.
 */

//Import list of packages//
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import javax.swing.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;

public class PacketSniffer extends javax.swing.JFrame {

    /**
     * Creates new form PacketSnifferGUI
     */
    // Private variables//
    private String fileAddress;     //Declared Host ID
    private String command;         //Command e.g Ping
    private String ipAddress;       //User IP address
    private boolean encryption;     //Encryption method

    // private static variables for encryption//
    private static SecretKeySpec secretKey;//Declare encryption key
    private static byte[] key;//Int for key

    // Set key encryption values
    public static void setKey(String myKey) {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    public PacketSniffer() {
        // pingBtn.isSelected();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptionGrp = new javax.swing.ButtonGroup();
        commandTf = new javax.swing.JTextField();
        headLbl = new javax.swing.JLabel();
        commandLbl = new javax.swing.JLabel();
        addressLbl = new javax.swing.JLabel();
        addressTf = new javax.swing.JTextField();
        nEncryptionBtn = new javax.swing.JRadioButton();
        yEncryptionBtn = new javax.swing.JRadioButton();
        encryptionLbl = new javax.swing.JLabel();
        eCommandLbl = new javax.swing.JLabel();
        eCommandBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CommandInputTa = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        CommandOutputTa = new javax.swing.JTextArea();
        commandInputLbl = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        commandOutputLbl = new javax.swing.JLabel();
        ipFinderBtn = new javax.swing.JButton();
        ipFindLbl = new javax.swing.JLabel();
        wireSharkBtn = new javax.swing.JButton();
        filePathLbl = new javax.swing.JLabel();
        pingBtn = new javax.swing.JButton();
        encryptionBtn = new javax.swing.JButton();
        decryptionBtn = new javax.swing.JButton();
        exeEncryptionBtn = new javax.swing.JButton();
        encryptionKeyLbl = new javax.swing.JLabel();
        encryptionKeyTf = new javax.swing.JTextField();
        exeDecryptionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commandTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandTfActionPerformed(evt);
            }
        });

        headLbl.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        headLbl.setText("Packet Sniffer");

        commandLbl.setText("Command:");

        addressLbl.setText("Ip4 Address:");

        addressTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTfActionPerformed(evt);
            }
        });

        encryptionGrp.add(nEncryptionBtn);
        nEncryptionBtn.setText("No");
        nEncryptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nEncryptionBtnActionPerformed(evt);
            }
        });

        encryptionGrp.add(yEncryptionBtn);
        yEncryptionBtn.setText("Yes");

        encryptionLbl.setText("Encryption:");

        eCommandLbl.setText("Execute Command");

        eCommandBtn.setText("Yes");
        eCommandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eCommandBtnActionPerformed(evt);
            }
        });

        CommandInputTa.setColumns(20);
        CommandInputTa.setRows(5);
        jScrollPane1.setViewportView(CommandInputTa);

        CommandOutputTa.setColumns(20);
        CommandOutputTa.setRows(5);
        jScrollPane2.setViewportView(CommandOutputTa);

        commandInputLbl.setText(" Input");

        commandOutputLbl.setText("output");

        ipFinderBtn.setText("IP");
        ipFinderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipFinderBtnActionPerformed(evt);
            }
        });

        ipFindLbl.setText("Find your IP for you:");

        wireSharkBtn.setText("WireShark");
        wireSharkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireSharkBtnActionPerformed(evt);
            }
        });

        filePathLbl.setText("Open WireShark");

        pingBtn.setText("1");
        pingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pingBtnActionPerformed(evt);
            }
        });

        encryptionBtn.setText("2");
        encryptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptionBtnActionPerformed(evt);
            }
        });

        decryptionBtn.setText("3");
        decryptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptionBtnActionPerformed(evt);
            }
        });

        exeEncryptionBtn.setText("Encryption");
        exeEncryptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exeEncryptionBtnActionPerformed(evt);
            }
        });

        encryptionKeyLbl.setText("Key");

        exeDecryptionBtn.setText("Dencryption");
        exeDecryptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exeDecryptionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(commandInputLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(commandOutputLbl)
                .addGap(149, 149, 149))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(headLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(commandLbl)
                                    .addComponent(commandTf, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addressTf, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addComponent(encryptionLbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(202, 202, 202)
                                .addComponent(yEncryptionBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nEncryptionBtn)))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eCommandLbl)
                            .addComponent(eCommandBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(exeEncryptionBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exeDecryptionBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encryptionKeyLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(encryptionKeyTf, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wireSharkBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filePathLbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipFinderBtn)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(ipFindLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pingBtn)
                            .addComponent(encryptionBtn)
                            .addComponent(decryptionBtn))
                        .addGap(34, 34, 34))
                    .addComponent(headLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commandLbl)
                            .addComponent(addressLbl)
                            .addComponent(encryptionLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commandTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yEncryptionBtn)
                            .addComponent(nEncryptionBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eCommandLbl)
                            .addComponent(ipFindLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eCommandBtn)
                            .addComponent(ipFinderBtn))))
                .addGap(28, 28, 28)
                .addComponent(filePathLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wireSharkBtn)
                    .addComponent(exeEncryptionBtn)
                    .addComponent(encryptionKeyLbl)
                    .addComponent(encryptionKeyTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exeDecryptionBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandOutputLbl)
                    .addComponent(commandInputLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addressTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressTfActionPerformed

    private void commandTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandTfActionPerformed
        // TODO add your handling code here:    
    }//GEN-LAST:event_commandTfActionPerformed

    private void nEncryptionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nEncryptionBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nEncryptionBtnActionPerformed

    private void eCommandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eCommandBtnActionPerformed

        // Add values to Variables
        ipAddress = addressTf.getText();       // Get the string from the address text field and store it in the ipAddress variable
        command = commandTf.getText();         // Get the string from the command text field and store it in the command variable

        // Set encryption to true or false
        if (yEncryptionBtn.isSelected()) {
            encryption = true;
        } else if (nEncryptionBtn.isSelected()) {
            encryption = false;
        }

        // Ping an IP address through the command line and print
        // the input and output to GUI
        try {

            String pingc = command + " " + ipAddress; // Create variable string pc to store the string of command and ipAddress combined
            CommandInputTa.setText(pingc);          // Display pingc in the Command Input text area
            Runtime run = Runtime.getRuntime();
            Process proc = run.exec(pingc);

            BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));   // Take input from the command line
            String inP;                             // Create a string inP
            String ping = "";                       // Create a string p
            while ((inP = in.readLine()) != null) {   // Read each line coming in from the command line
                ping += inP + "\r\n";                 // and store it in ping
            }
            in.close();                             // Close the connection
            CommandOutputTa.setText(ping);          // display ping in the Command Output text area

            if (fileAddress != null) {                    // If the File Address has a value
                try {
                    Process p = Runtime.getRuntime().exec(fileAddress);     // execute wireshark for the yser
                    p.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(PacketSniffer.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        } catch (IOException e) {
            System.out.println(e);
        }


    }//GEN-LAST:event_eCommandBtnActionPerformed

    private void ipFinderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipFinderBtnActionPerformed

        // Get the User's IP and place it in the address text field   
        try {
            InetAddress address;
            address = InetAddress.getLocalHost();           // Get user's IP address
            String hostAddress = address.getHostAddress();  // Store the host address in the host address variable
            addressTf.setText("");                          // Delete whatever was already in the address text field
            addressTf.setText(hostAddress.toString());      // Place the user's IP in the address text field
        } catch (UnknownHostException e) // If not able to get the host
        {
            addressTf.setText("Host ID not found!"); // Print "Host not found" in the address text field
        }

    }//GEN-LAST:event_ipFinderBtnActionPerformed

    private void wireSharkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wireSharkBtnActionPerformed
        // TODO add your handling code here:

        try {
            //IF Windows OS is running, try open up WireShark//
            if (OSDetection.isWindowsOS()) {
                /*
                Try open Wireshark application
                 */
                try {
                    Process p = Runtime.getRuntime().exec("\"c:/program files/Wireshark/Wireshark.exe\"");
                    p.waitFor();
                } //Catch an IO exception and display message//
                catch (IOException io) {
                    JOptionPane.showMessageDialog(null, io, "IO Exception Error", JOptionPane.WARNING_MESSAGE);
                } //Catch an interrupted exception and display message//
                catch (InterruptedException in) {
                    JOptionPane.showMessageDialog(null, in, "Interrupted Exception Error", JOptionPane.WARNING_MESSAGE);
                }

            } //IF Linux OS or Mac OS OS is running, try open up WireShark//
            else if (OSDetection.isLinuxOS() || OSDetection.isMacOS()) {
                try {
                    Process p = Runtime.getRuntime().exec("/Applications/Wireshark.app/");
                    p.waitFor();
                } //Catch an IO exception and display message//
                catch (IOException io) {
                    JOptionPane.showMessageDialog(null, io, "IO Exception Error", JOptionPane.WARNING_MESSAGE);
                } //Catch an interrupted exception and display message//
                catch (InterruptedException in) {
                    JOptionPane.showMessageDialog(null, in, "Interrupted Exception Error", JOptionPane.WARNING_MESSAGE);
                }

            } //Else the OS is unknown//
            else {
                JOptionPane.showMessageDialog(null, "No dectable OS", "Unknown OS", JOptionPane.WARNING_MESSAGE);
            }
        } //Throw error message if all else fails//
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, e.toString(), JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_wireSharkBtnActionPerformed

    private void pingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pingBtnActionPerformed
        // TODO add your handling code here:
        addressLbl.setVisible(true);
        addressTf.setVisible(true);
        commandInputLbl.setVisible(true);
        commandLbl.setVisible(true);
        commandTf.setVisible(true);
        eCommandLbl.setVisible(true);
        eCommandBtn.setVisible(true);
        exeEncryptionBtn.setVisible(false);
        encryptionKeyLbl.setVisible(false);
        encryptionKeyTf.setVisible(false);
        encryptionLbl.setVisible(true);
        yEncryptionBtn.setVisible(true);
        nEncryptionBtn.setVisible(true);
        ipFindLbl.setVisible(true);
        ipFinderBtn.setVisible(true);
        filePathLbl.setVisible(true);
        wireSharkBtn.setVisible(true);
        exeDecryptionBtn.setVisible(false);
    }//GEN-LAST:event_pingBtnActionPerformed

    private void encryptionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptionBtnActionPerformed
        // TODO add your handling code here:
        addressLbl.setVisible(false);
        addressTf.setVisible(false);
        commandInputLbl.setVisible(true);
        commandLbl.setVisible(false);
        commandTf.setVisible(false);
        eCommandLbl.setVisible(false);
        eCommandBtn.setVisible(false);
        exeEncryptionBtn.setVisible(true);
        encryptionKeyLbl.setVisible(true);
        encryptionKeyTf.setVisible(true);
        encryptionLbl.setVisible(false);
        yEncryptionBtn.setVisible(false);
        nEncryptionBtn.setVisible(false);
        ipFindLbl.setVisible(false);
        ipFinderBtn.setVisible(false);
        filePathLbl.setVisible(false);
        wireSharkBtn.setVisible(false);
        exeDecryptionBtn.setVisible(false);

        CommandInputTa.setText(" ");
        CommandOutputTa.setText(" ");
    }//GEN-LAST:event_encryptionBtnActionPerformed

    private void decryptionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptionBtnActionPerformed
        // TODO add your handling code here:
        addressLbl.setVisible(false);
        addressTf.setVisible(false);
        commandInputLbl.setVisible(true);
        commandLbl.setVisible(false);
        commandTf.setVisible(false);
        eCommandLbl.setVisible(false);
        eCommandBtn.setVisible(false);
        exeEncryptionBtn.setVisible(false);
        encryptionKeyLbl.setVisible(true);
        encryptionKeyTf.setVisible(true);
        encryptionLbl.setVisible(false);
        yEncryptionBtn.setVisible(false);
        nEncryptionBtn.setVisible(false);
        ipFindLbl.setVisible(false);
        ipFinderBtn.setVisible(false);
        filePathLbl.setVisible(false);
        wireSharkBtn.setVisible(false);
        exeDecryptionBtn.setVisible(true);

        CommandInputTa.setText(" ");
        CommandOutputTa.setText(" ");
    }//GEN-LAST:event_decryptionBtnActionPerformed

    private void exeEncryptionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exeEncryptionBtnActionPerformed
        // TODO add your handling code here:
        /*
        This involves asking the user for a key they want to encrypt    
         */
        if (encryption = true) {
            try {
                String strToEncrypt;//Grab input to encrypt
                String secret;//Store secret key which is the encrpyted text

                strToEncrypt = CommandInputTa.getText();
                secret = encryptionKeyTf.getText();
                setKey(secret);
                //Cipher Encrpyts or decrypts data in a single-part operation, or finishes a multiple part operation 

                Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
                cipher.init(Cipher.ENCRYPT_MODE, secretKey);
                //Base 64 is an encoding scheme that converts binary data into text format
                CommandOutputTa.setText(Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8"))));

            } catch (Exception e) {
                CommandOutputTa.setText("Please enter the right key");
            }
        } else {

        }

    }//GEN-LAST:event_exeEncryptionBtnActionPerformed

    private void exeDecryptionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exeDecryptionBtnActionPerformed
        // TODO add your handling code here:

        /*
         This involves asking the user to decrypt the key they have inputted previously using the encryption method  
         */
        try {
            String secret;//Grab input to Decrypt
            String strToDecrypt;//Store secret key which is the encrpyted text

            secret = encryptionKeyTf.getText();
            strToDecrypt = CommandInputTa.getText();
            setKey(secret);//Store key as Secret 
            //Cipher Encrpyts or decrypts data in a single-part operation, or finishes a multiple part operation 
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            //Base 64 is an encoding scheme that converts binary data into text format
            CommandOutputTa.setText(new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt))));

        } catch (Exception e) {
            CommandOutputTa.setText("Please enter the right key");
        }

    }//GEN-LAST:event_exeDecryptionBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacketSniffer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacketSniffer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacketSniffer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacketSniffer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacketSniffer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CommandInputTa;
    private javax.swing.JTextArea CommandOutputTa;
    private javax.swing.JLabel addressLbl;
    private javax.swing.JTextField addressTf;
    private javax.swing.JLabel commandInputLbl;
    private javax.swing.JLabel commandLbl;
    private javax.swing.JLabel commandOutputLbl;
    private javax.swing.JTextField commandTf;
    private javax.swing.JButton decryptionBtn;
    private javax.swing.JButton eCommandBtn;
    private javax.swing.JLabel eCommandLbl;
    private javax.swing.JButton encryptionBtn;
    private javax.swing.ButtonGroup encryptionGrp;
    private javax.swing.JLabel encryptionKeyLbl;
    private javax.swing.JTextField encryptionKeyTf;
    private javax.swing.JLabel encryptionLbl;
    private javax.swing.JButton exeDecryptionBtn;
    private javax.swing.JButton exeEncryptionBtn;
    private javax.swing.JLabel filePathLbl;
    private javax.swing.JLabel headLbl;
    private javax.swing.JLabel ipFindLbl;
    private javax.swing.JButton ipFinderBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton nEncryptionBtn;
    private javax.swing.JButton pingBtn;
    private javax.swing.JButton wireSharkBtn;
    private javax.swing.JRadioButton yEncryptionBtn;
    // End of variables declaration//GEN-END:variables

}
